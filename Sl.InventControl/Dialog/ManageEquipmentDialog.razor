@using Sl.InventControl.Data;

@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>        
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1"/>
            @Caption
        </MudText>        
    </TitleContent>
    
    <DialogContent>
        <MudItem xs="12" >
            <!--<MudPaper>
                <MudStack Row="true">
                    <MudTextField @bind-Value="@Item.Type.Make" Label="Make" ReadOnly="true" />
                    <MudTextField @bind-Value="@Item.Type.Model" Label="Model" ReadOnly="true" />
                </MudStack>
            </MudPaper>-->

            <MudPaper>
                <MudStack Row="true">
                    <MudSelect T="EquipmentTypeModel" Label="Type" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@Item.Type" ToStringFunc="@ToStringFunc">
                        @foreach (var type in EquipmentTypes) {
                            <MudSelectItem T="EquipmentTypeModel" Value="type">@(type.Type): @(type.Make) - @(type.Model)</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTextField @bind-Value="@Item.SerialNumber" Label="Serial" ReadOnly="false" />
                </MudStack>
            </MudPaper>

            <MudStack Row="true">
                <MudTextField @bind-Value="@Item.Location" Label="Location" ReadOnly="false" />
                <MudTextField @bind-Value="@Item.Remark" Label="Remark" ReadOnly="false" />

            </MudStack>
            
        </MudItem>
    </DialogContent>
    
    
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="ExecuteOkClick">OK</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] 
    public string Caption { get; set; } = "Confirm?";

    [Parameter] 
    public string SnackbarInfo { get; set; } = "action confirmed";

    [Parameter]
    public List<EquipmentTypeModel> EquipmentTypes { get; set; } = new();

    [Parameter]
    public EquipmentModel Item { get; set; } = new()
        {
            Type = new()
        };

    protected static readonly Func<EquipmentTypeModel, string> ToStringFunc = e => $"{e?.Type}: {e?.Make} - {e?.Model}";

    private void Cancel() {
        MudDialog.Cancel();
        MudDialog.Close(DialogResult.Cancel());
    }

    private void ExecuteOkClick() {

        if(string.IsNullOrEmpty(Item.SerialNumber) || Item.Type == null) {
            Snackbar.Add("Please provide at least a serial number and Type", Severity.Warning);
        }else {

            Snackbar.Add(SnackbarInfo, Severity.Success);

            MudDialog.Close(DialogResult.Ok(Item));
        }

    }
}
